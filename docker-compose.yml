
# project name
name: gn

# geonetwork java settings
x-geonetwork-environment:
  &default-geonetwork-environment
  WEBAPP_CONTEXT_PATH: / 
  DATA_DIR: /catalogue-data
  TZ: Europe/Amsterdam
  JAVA_OPTS: >-
    --add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED
    -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true
    -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC
    -Djetty.httpConfig.requestHeaderSize=32768
    -Dorg.eclipse.jetty.server.Request.maxFormContentSize=500000
    -Dorg.eclipse.jetty.server.Request.maxFormKeys=4000
    -Dorg.apache.activemq.broker.BrokerService.tempUsage.limit=2gb
    -Dcom.sun.management.jmxremote=false

# geonetwork configuration properties for elasticsearch and geonetwork API
  GN_CONFIG_PROPERTIES: >-
    -Dgeonetwork.dir=/catalogue-data
    -Dgeonetwork.formatter.dir=/catalogue-data/data/formatter
    -Dgeonetwork.schema.dir=/opt/geonetwork/WEB-INF/data/config/schema_plugins
    -Dgeonetwork.indexConfig.dir=/opt/geonetwork/WEB-INF/data/config/index
    -Dgeonetwork.schemapublication.dir=/opt/geonetwork/WEB-INF/data/resources/schemapublication
    -Dgeonetwork.htmlcache.dir=/opt/geonetwork/WEB-INF/data/resources/htmlcache
    -Des.host=elasticsearch
    -Des.protocol=http
    -Des.port=9200
    -Des.protocol=http
    -Des.url=http://elasticsearch:9200
    -Des.username=
    -Des.password=
    -Dgeonetwork.ESFeaturesProxy.targetUri=http://ogc-api-records-service:8080/gn-features/{_} # use the ogc-api-records-service internal name
    -Dgeonetwork.MicroServicesProxy.targetUri=http://ogc-api-records-service:8080/ogc-api-records-service #use ogc api records service internal name
  GEONETWORK_DB_TYPE: postgres
  GEONETWORK_DB_HOST: database
  GEONETWORK_DB_PORT: 5432
  GEONETWORK_DB_NAME: geonetwork
  GEONETWORK_DB_USERNAME: geonetwork
  GEONETWORK_DB_PASSWORD: geonetwork
  VIRTUAL_HOST: localhost 
#  -Dgeonetwork.HttpDashboardProxy.targetUri=http://kibana:5601/geonetwork/dashboards # use kibana internal name

# geonetwork web traffic settings
x-service-geonetwork:
  &default-service-geonetwork
  image: geonetwork:4.4.6
  healthcheck:
    test: "curl https://vigilant-goggles-7p5wwqrxw9vfx554-8080.app.github.dev/"
    interval: 5s
    timeout: 5s
    retries: 30
  labels:
    - "traefik.enable=true"
    - "traefik.http.routers.geonetwork.rule=PathPrefix(`/geonetwork`)"
    - "traefik.http.routers.geonetwork.entrypoints=websecure"
    - "traefik.http.routers.geonetwork.service=geonetwork"
    - "traefik.http.services.geonetwork.loadbalancer.server.port=8080"
    - "traefik.http.services.geonetwork.loadbalancer.sticky=true"
    - "traefik.http.services.geonetwork.loadbalancer.sticky.cookie.name=gnstickycookie"
    - "traefik.http.services.geonetwork.loadbalancer.sticky.cookie.secure=false"
    - "traefik.http.services.geonetwork.loadbalancer.sticky.cookie.httpOnly=true"
  restart: always
  user: root
  volumes:
   # - geonetwork:/catalogue-data
    - ./geonetwork-data:/catalogue-data
    - ./pgdata:/var/lib/postgresql/data
    - ./esdata:/usr/share/elasticsearch/data
    - ./activemq-data:/var/lib/jetty/activemq-data 
  depends_on:
    database:
      condition: service_healthy
  networks:
    - gn-network

services:

# nginx is used only for the static pages of the portal, we may use it for other services too in the future if we run into issues with Traefik. 
  nginx:
    image: nginx:alpine
    container_name: science-portal
    ports:
      - "8082:80"
    volumes:
      - ./html:/usr/share/nginx/html:ro  # Serve your HTML file
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.science-portal.rule=PathPrefix(`/portal`)"  # Traefik route
      - "traefik.http.routers.science-portal.entrypoints=websecure"
      - "traefik.http.services.science-portal-service.loadbalancer.server.port=80"  # Expose port 80
    networks:
      - web

# Traefik is configured to receive incoming HTTP/HTTPS requests on ports 80 and 443, respectively
# Requests with the /geonetwork path prefix are routed to the geonetwork service.
# Requests with the /portal path prefix are routed to the nginx service.
# Requests are also routed to the service on port 8082, and given the label, this service is named: research-portal-service.
  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      - "--log.filePath=/logs/traefik.log"
      - "--accesslog=true"
      - "--accesslog.bufferingsize=50"
      - "--accesslog.filePath=/logs/access.log"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:8081"
      - "--log.level=DEBUG"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"
      - "8000:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - traefiklog:/logs
    networks:
      - gn-network
      - web
    labels:
      - "traefik.http.routers.research-portal.entrypoints=websecure"
      - "traefik.http.routers.research-portal.service=research-portal-service"
      - "traefik.http.services.research-portal-service.loadbalancer.server.port=8082" # Changed to 8082

# GeoNetwork, the core application within this setup, requires a database to store its metadata, configuration, and other persistent data. 
# The database service fulfills this requirement.
  database:
    image: postgis/postgis:11-2.5
    environment:
      POSTGRES_USER: geonetwork
      POSTGRES_PASSWORD: geonetwork
      POSTGRES_DB: geonetwork
    command:
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "logging_collector=true"
      - "-c"
      - "log_file_mode=0644"
      - "-c"
      - "log_directory=/var/log/postgresql"
      - "-c"
      - "log_filename=postgresql.log"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - pglog:/var/log/postgresql
    networks:
      - gn-network

# the main service that delivers Geonetwork, on port 8080. 
  geonetwork:
    <<: *default-service-geonetwork
    environment:
      <<: *default-geonetwork-environment
      HARVESTER_SCHEDULER_ENABLED: "false"
      HARVESTER_REFRESH_INTERVAL_MINUTES: 10
      ACTIVEMQ_TEMP_USAGE_LIMIT: "10GB"
      KEYCLOAK_REALM: IDP
      KEYCLOAK_AUTH_SERVER_URL: https://ominous-acorn-jq79964gg7gc55rj-8085.app.github.dev/auth 
      KEYCLOAK_SSL_REQUIRED: false
      KEYCLOAK_RESOURCE: geonetwork 
      KEYCLOAK_SECRET: PnqzBJGlWSID2co9LTpdaChtBQs7U3fm
      KEYCLOAK_CONFIDENTIAL_PORT: 8443
      KEYCLOAK_DISABLE_TRUST_MANAGER: false
      KEYCLOAK_PUBLIC_CLIENT: false 
    ports:
      - 8080:8080
    networks:
      - gn-network

# Used to create a scaled-out instance of the GeoNetwork application. We may need it in the future. 
# The profiles: ["scaled"] line indicates that this service is intended for scaling purposes. 
# It's only activated when you use Docker Compose profiles, specifically the "scaled" profile.
# The deploy: mode: replicated replicas: 1 section configures Docker to run one replica of the 
# GeoNetwork container. You could increase the replicas value to have more geonetwork instances.
# The environment section inherits the default GeoNetwork environment variables from x-geonetwork-environment.
# HARVESTER_SCHEDULER_ENABLED: "false" disables the harvester scheduler in this replica.
# HARVESTER_REFRESH_INTERVAL_MINUTES: 0 sets the harvester refresh interval to 0 minutes.
# ports: - "8081-8082:8080" exposes a range of ports on the host, mapping them to port 8080 
# within the container. This is done to avoid port conflicts when scaling.
# The <<: *default-service-geonetwork and <<: *default-geonetwork-environment lines reuse the base 
# GeoNetwork service and environment configurations, ensuring consistency between the main geonetwork 
# service and its replica.
  geonetwork-replica:
    profiles: ["scaled"]
    <<: *default-service-geonetwork
    environment:
      <<: *default-geonetwork-environment
      HARVESTER_SCHEDULER_ENABLED: "false"
      HARVESTER_REFRESH_INTERVAL_MINUTES: 0
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "8081-8082:8080"

# The OGC API - Records standard defines a web-based interface for accessing and managing metadata records. 
# This service implements that standard, allowing external applications to query and retrieve metadata from 
# your GeoNetwork instance.
# SPRING_PROFILES_ACTIVE: standalone indicates that the service is running in standalone mode.
# SPRING_DATASOURCE_URL, SPRING_DATASOURCE_USERNAME, and SPRING_DATASOURCE_PASSWORD provide the database connection details.
# GN_BASEURL and GN_LEGACY_URL point to the GeoNetwork API and legacy URLs, respectively.
# GN_INDEX_URL points to the elasticsearch index.
# SERVER_FORWARDHEADERSSTRATEGY: FRAMEWORK configures header forwarding.
# JAVA_OPTS: -Dfile.encoding=UTF-8 sets the Java file encoding.
  ogc-api-records-service:
    image: geonetwork/gn-cloud-ogc-api-records-service:4.4.3-0
    environment:
      SPRING_PROFILES_ACTIVE: standalone
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/geonetwork
      SPRING_DATASOURCE_USERNAME: geonetwork
      SPRING_DATASOURCE_PASSWORD: geonetwork
      GN_BASEURL: http://geonetwork:8080/geonetwork/api #use geonetwork internal name
      GN_LEGACY_URL: http://geonetwork:8080/geonetwork #use geonetwork internal name
      GN_INDEX_URL: http://elasticsearch:9200 #use elasticsearch internal name
      SERVER_FORWARDHEADERSSTRATEGY: FRAMEWORK
      JAVA_OPTS: -Dfile.encoding=UTF-8
    healthcheck:
      test: "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1"
      interval: 10s
      timeout: 2s
      retries: 10
    depends_on:
      geonetwork:
        condition: service_healthy
    networks:
      - gn-network

# The elasticsearch service is used to provide a search and analytics engine for GeoNetwork
# The image: elasticsearch:8.14.3 line specifies the Elasticsearch image to use.
# ports: - 9200:9200 exposes the elasticsearch port.
# ulimits configures system limits for Elasticsearch, which are important for performance.
# healthcheck ensures that Elasticsearch is running and healthy.
# environment sets various Elasticsearch configuration options:
# cluster.name=docker-cluster defines the cluster name.
# bootstrap.memory_lock=true locks Elasticsearch's memory to prevent swapping.
# discovery.type=single-node configures Elasticsearch to run in single-node mode.
# ES_JAVA_OPTS=-Xms2g -Xmx2g sets the Java heap size.
# xpack.security.enabled=false and xpack.security.enrollment.enabled=false disables Elasticsearch security features, which is common in development environments.
# volumes: - esdata:/usr/share/elasticsearch/data mounts the esdata volume to /usr/share/elasticsearch/data, ensuring that the Elasticsearch data is persisted.
# The ogc-api-records-service and kibana services depend on elasticsearch.
  elasticsearch:
    image: elasticsearch:8.14.3
# probably we don't need the commented lines below because of settings in traefik, but keep here for now just in case. 
#    ports:
#      - 9200:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "curl", "-s", "-XGET", "http://vigilant-goggles-7p5wwqrxw9vfx554-9200.app.github.dev/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - gn-network
    labels:  
      - "traefik.enable=true"
      - "traefik.http.routers.elasticsearch.rule=PathPrefix(`/elasticsearch`)"
      - "traefik.http.routers.elasticsearch.entrypoints=websecure"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"      

# Kibana is a visualization and exploration tool designed to work with Elasticsearch. It allows you to create dashboards, charts, and graphs 
# to visualize and analyze the data stored in Elasticsearch.
# ELASTICSEARCH_URL: http://elasticsearch:9200 tells Kibana where to find Elasticsearch on the docker network i.e. gn-network
# SERVER_BASEPATH: /geonetwork/dashboards sets the base path for Kibana's interface.
# SERVER_REWRITEBASEPATH: "false" prevents Kibana from rewriting the base path.
# XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: "true" enables monitoring.
# "depends_on: elasticsearch: condition: service_healthy" ensures that Kibana starts only after Elasticsearch is running.
# Traefik is configured to route traffic to kibana from the /geonetwork/dashboards path. This allows the user to access Kibana from the browser.
  kibana:
    image: kibana:8.14.3
    environment:
      SERVER_NAME: "kibana"
      ELASTICSEARCH_URL: http://elasticsearch:9200
      SERVER_BASEPATH: /geonetwork/dashboards
      SERVER_REWRITEBASEPATH: "false"
      XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: "true"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - gn-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=PathPrefix(`/geonetwork/dashboards`)"
      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

# the above services use several persistent volumes, these are defined below 
volumes:
  geonetwork:
  esdata:
  pgdata:
  pglog:
  traefiklog:

# All services are on the gn-network, and the external web should be defined with docker create network web before the first time you create the
# docker-compose with the up -d. Note that docker-compose adds gn_ in front of the gn-network so in reality the network name is gn_gn-network. 
networks:
  gn-network:
    driver: bridge
  web:
    external: true 
